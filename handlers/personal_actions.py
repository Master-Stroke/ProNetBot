from dispatcher import bot
import requests
from config import open_weather_token
from config import CHAT_ID
from config import ADMIN_ID
from aiogram import Bot, types,executor,Dispatcher
from dbx import Database
import datetime
import json
from aiogram.utils.markdown import hbold, hunderline, hcode, hlink
import psutil
from bs4 import BeautifulSoup as BS
import time
from main_news import check_news_update
from aiogram import types
from aiogram.dispatcher.filters import AdminFilter, IsReplyFilter
from random import randint

words = ['—Å—É–∫–∞', '–±–ª—è—Ç—å', '—Ö—É–π', '–ø–µ–¥–∞—Ä–∞—Å', '–ø–∏–∑–¥–∞', '–≥–æ–≤–Ω–æ', '–ø–æ—Ö—É–π', '–µ–±–∞—Ç—å', '–µ–±–∞–Ω–∏–π', '–¥–µ–±–∏–ª', '–ø–µ–¥–∏–∫', '–¥—É—Ä–∞–∫', '–¥–æ–ª–±–∞–µ–±']
Year = int(datetime.datetime.now().strftime("%Y"))
Mounth = datetime.datetime.now().strftime("%B")
Dey = int(datetime.datetime.now().strftime("%d"))
Hour = int(datetime.datetime.now().strftime("%H"))
Minute = datetime.datetime.now().strftime("%M")
Dates = [Dey, Hour, Minute, Mounth, Year]
date = f"{Dates[4]}y {Dates[3]} {Dates[0]} {Dates[1]}:{Dates[2]}"

def cpu ():
  cpu_per = int (psutil.cpu_percent (1))
  return cpu_per

@dp.message_handler(commands=["start", "help"], commands_prefix="!/")
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ß–∞—Ç–∞ –ü—Ä–æ–≥—Ä–∞–º–∏—Å—Ç–æ–≤\n–í –µ—Ç–æ–º —á–∞—Ç–µ —Ç–∏ –º–æ–∂–µ–∂ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–µ—Å—Ç–∏!\n–ü–æ–∂–∞–ª—É—Å—Ç–∞ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞!\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ /rules\n–í—Å–µ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ /commands\n–ï—Å–ª–∏ –í–∏ —É–≤–∏–¥–µ–ª–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /report —á—Ç–æ–±–∏ –∞–¥–º–∏–Ω–∏ —á–∞—Ç–∞ –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–Ω–∏—è –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è!")

@dp.message_handler(commands = ["reply"])
async def repl(message: types.Message):
    await bot.send_message(int(message.text.split()[1]), message.text.replace(message.text.split()[1], "").replace("/reply", ""))

@dp.message_handler(commands=["channel"], commands_prefix="!/")
async def start(message: types.Message):
    if '/channel' in message.text:
        await message.delete()
    await message.reply("–ó–∞—Ö–æ–¥—å—Ç–µ –Ω–∞ –ö–∞–Ω–∞–ª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤\nhttps://t.me/official_programmerchannel")

@dp.message_handler(commands=["me"], commands_prefix="!/")
async def welcome(message: types.Message):
    if message.from_user.username is None:
        await message.reply(f"Name - {message.from_user.full_name}\nID - {message.from_user.id}\n")
    else:
        await message.reply(f"Name - {message.from_user.full_name}\n"
                            f"ID - <code>{message.from_user.id}</code>\n"
                            f"Username - @{message.from_user.username}\n")

@dp.message_handler(commands=["my_username"], commands_prefix="!/")
async def id(message: types.Message):
    if message.from_user.username is None:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç—É username!")
    await message.reply(f"–í–∞—à username: @{message.from_user.username}")

@dp.message_handler(commands=["my_name"], commands_prefix="!/")
async def id(message: types.Message):
    await message.reply(f"–í–∞—à–µ –∏–º—è: {message.from_user.full_name}")

@dp.message_handler(commands=["my_number"], commands_prefix="!/")
async def id(message: types.Message):
    await message.reply(f"–í–∞—à –Ω–æ–º–µ—Ä: {message.from_user.number}")

@dp.message_handler(commands=["my_id"], commands_prefix="!/")
async def id(message: types.Message):
    await message.reply(f"–í–∞—à ID: <code>{message.from_user.id}</code>")

@dp.message_handler(commands=["chat_id"], commands_prefix="!/")
async def chat(message: types.Message):
    await message.reply(f"ID —á–∞—Ç–∞: <code>{message.chat.id}</code>")

@dp.message_handler(commands=["dice"], commands_prefix="!/")
async def start(message: types.Message):
    await message.reply("üé≤")

@dp.message_handler(commands=["bot"], commands_prefix="!/")
async def start(message: types.Message):
    await message.reply(f"\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏—è –±–∏–ª–æ: {date} (GMT+3).\n–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ö–æ—Å—Ç–∏–Ω–≥–∞: {cpu()}%")

@dp.message_handler(content_types=["new_chat_members"])
async def new_chat(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —Ç–∏ –≤ –ß–∞—Ç–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤!\n–í –µ—Ç–æ–º —á–∞—Ç–µ —Ç–∏ –º–æ–∂–µ–∂ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–µ—Å—Ç–∏!\n–ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:)\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ /rules\n–ö–æ–º–∞–Ω–¥–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ /commands")

    if not dp.examination(message.from_user.id):
        dp.add(message.from_user.id)
    if not dp.mute(message.from_user.id):
        print("/")
    else:
        await message.delete()

@dp.message_handler(content_types=["left_chat_member"])
async def left_chat(message: types.Message):
    await message.reply("–ü–æ–∫–∞, –Ω–∞–¥–µ—é—Å—å —Ç–∏ –≤–µ—Ä–Ω–µ—à—Å—è!")

@dp.message_handler(commands=["commands"], commands_prefix="!/")
async def start(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n–ö–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ! –∏ /\n/commands —á—Ç–æ–±–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥–∏ —á–∞—Ç–∞\n/start –∏ /help –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ —á–∞—Ç—É\n/report —á—Ç–æ–±–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /report\n@chessy_bot –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç–∏\n/fresh_news –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ IT\n/last_fave_news –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –º–∏—Ä–µ IT\n/all_news –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ IT\n/weather –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É\n/rules —á—Ç–æ–±–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n/usd –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞\n/eur –ö—É—Ä—Å –ï–≤—Ä–æ\n/uah –ö—É—Ä—Å –ì—Ä–∏–≤–Ω–∏\n/rub –ö—É—Ä—Å –†—É–±–ª—è\n/gbp –ö—É—Ä—Å –§—É–Ω—Ç–∞\n/pln –ö–£—Ä—Å –ó–ª–æ—Ç–∏—Ö\n/well –≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É –∞ –ø–æ—Ç–æ–º –≤—Ç–æ—Ä—É—é —Ç–∏–ø–∞ –≤–æ—Ç —Ç–∞–∫: /well_usd uah –∏ –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç–∏ –≤ –≤—Ç–æ—Ä–æ–π\n\n–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞:\n/msg —á—Ç–æ–±–∏ –ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n/mute –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/ban –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/tmute –≤—Ä–µ–º–º–µ–Ω–∏–π –º—É—Ç\n/reply –ü–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/kick —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–∏\n/unmute —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–µ\n/unban —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–µ")

@dp.message_handler(commands=["site"], commands_prefix="!/")
async def start(message: types.Message):
    if '/site' in message.text:
        await message.delete()
    if '!site' in message.text:
        await message.delete()
    await message.answer("–ó–∞—Ö–æ–¥—å—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –ö–ª–æ–Ω–¥–∞–π–∫ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤\nhttps://klondikeprogrammers.ga")

@dp.message_handler(commands=["bots"], commands_prefix="!/")
async def start(message: types.Message):
    await message.reply("–ë–æ—Ç–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n@see_weather_city_bot –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞\n@pro_moder_bot –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n@bot_accountant_bot –±—É—Ö–≥–∞–ª–µ—Ä –±–æ—Ç\n@bot_qr_code_bot –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR Code\n@bot_join_bot –ê–≤—Ç–æ –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–Ω–∏—è –≤ —á–∞—Ç\n@search_photo_cats_bot —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –∫–æ—Ç–æ–≤\n@search_photo_dog_bot —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫\n@botcaptchabot –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–ø—á–∏\n@programmerchat_bot –ë–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä (–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤ —á–∞—Ç–µ https://t.me/official_programmerchat)")

@dp.message_handler(commands=["say"], commands_prefix="!/")
async def start(message: types.Message):
    if '/say' in message.text:
        await message.delete()
    if '!say' in message.text:
        await message.delete()
    await message.answer("–ü–æ–∂–∞–ª—É—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞!\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ /rules\n–í—Å–µ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ /commands\n–ï—Å–ª–∏ –í–∏ —É–≤–∏–¥–µ–ª–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /report —á—Ç–æ–±–∏ –∞–¥–º–∏–Ω–∏ –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è!")

@dp.message_handler(commands=["say1"], commands_prefix="!/")
async def start(message: types.Message):
    if '/say1' in message.text:
        await message.delete()
    if '!say1' in message.text:
        await message.delete()
    await message.answer("–û–±—â–∞–µ–º—Å—è –Ω–∞ —Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å–µ–≥–æ —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–æ üëä\n\nüö´–ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞\nüö´–°–ø–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòä")

@dp.message_handler(commands=["sayrep"], commands_prefix="!/")
async def start(message: types.Message):
    if '/sayrep' in message.text:
        await message.delete()
    if '!sayrep' in message.text:
        await message.delete()
    await message.answer("–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É /report —Å –ø–æ–º–æ—â—é –∫–æ—Ç–æ—Ä–æ–π –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –≤ —á–∞—Ç–µ")

@dp.message_handler(commands=["report"], commands_prefix="!/")
async def start(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")
    if message.reply_to_message:
        if not message.reply_to_message.from_user.id == message.from_user.id:
            if not message.reply_to_message.from_user.id == 5394425690:
                if not message.reply_to_message.from_user.id == 553147242:
                    if not message.reply_to_message.from_user.id == 1356559037:
                        if not message.reply_to_message.from_user.id == 837817771:
                                    if not message.from_user.id == 837817771:
                                       await message.reply(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º")
    if message.reply_to_message.from_user.id == message.from_user.id:
        await message.reply("–ù–µ–ª—å–∑—è —Ä–µ–ø–æ—Ä—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è ü§™")
    if message.reply_to_message.from_user.id == 5394425690:
        await message.reply("–ë–æ—Ç–∞ —Ä–µ–ø–æ—Ä—Ç–∏—à? –ê–π-–∞–π-–∞–π üòà")
    if message.reply_to_message.from_user.id == 553147242:
        await message.reply("–ë–æ—Ç–∞ —Ä–µ–ø–æ—Ä—Ç–∏—à? –ê–π-–∞–π-–∞–π üòà")
    if message.reply_to_message.from_user.id == 1356559037:
        await message.reply("–ë–æ—Ç–∞ —Ä–µ–ø–æ—Ä—Ç–∏—à? –ê–π-–∞–π-–∞–π üòà")
    if message.reply_to_message.from_user.id == 837817771:
        await message.reply("–ê–¥–º–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∏—à? –ê–π-–∞–π-–∞–π üòà")
    if message.from_user.id == 837817771:
        await message.reply("–ó–∞—á–µ–º –∞–¥–º–∏–Ω—É –∫–∏–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç? ü§Ø")

# ban user
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['ban'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    replied_user = message.reply_to_message.from_user.id
    admin_id = message.from_user.id
    await bot.ban_chat_member(chat_id=message.chat.id, user_id=replied_user)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username} –≤–∏–¥–∞–Ω –±–∞–Ω")

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['ban'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")    
                            

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['unban'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    replied_user = message.reply_to_message.from_user.id
    admin_id = message.from_user.id
    await bot.unban_chat_member(chat_id=message.chat.id, user_id=replied_user)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ä–∞–∑–±–∞–Ω–µ–Ω")  

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['unban'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")                                                         

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['kick'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    replied_user = message.reply_to_message.from_user.id
    admin_id = message.from_user.id
    await bot.kick_chat_member(chat_id=message.chat.id, user_id=replied_user)
    await message.reply(chat_id=message.chat.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –∫–∏–∫–Ω—É—Ç —Å —á–∞—Ç–∞")

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['kick'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")          

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['unkick'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    replied_user = message.reply_to_message.from_user.id
    admin_id = message.from_user.id
    await bot.ban_chat_member(chat_id=message.chat.id, user_id=replied_user)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ä–∞–∑–∫–∏–∫–Ω–µ—Ç")  

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['unkick'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")        

# mute user in chat
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['mute'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def mute(message: types.Message):
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username} –≤–∏–¥–∞–Ω –º—É—Ç –Ω–∞ –≤—Å–µ–≥–¥–∞!")

# mute user in chat
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands=['tmute'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def mute(message: types.Message):
    args = message.get_args()
    if args:
        till_date = message.text.split()[1]
    else:
        till_date = "365d"

    if till_date[-1] == "m":
        ban_for = int(till_date[:-1]) * 60
        say = "–º–∏–Ω—É—Ç"
        on = " –Ω–∞"
        if ban_for == "60":
            say = "–º–∏–Ω—É—Ç—É"
        if ban_for == "120":
            say = "–º–∏–Ω—É—Ç–∏"
        if ban_for == "180":
            say = "–º–∏–Ω—É—Ç–∏"
        if ban_for == "240":
            say = "–º–∏–Ω—É—Ç–∏"                                    
    elif till_date[-1] == "h":
        ban_for = int(till_date[:-1]) * 3600
        say = "—á–∞—Å–æ–≤"
        on = " –Ω–∞"
        if ban_for == "60":
            say = "—á–∞—Å"
        if ban_for == "120":
            say = "—á–∞—Å–∞"
        if ban_for == "180":
            say = "—á–∞—Å–∞"
        if ban_for == "240":
            say = "—á–∞—Å–∞"     
    elif till_date[-1] == "d":
        ban_for = int(till_date[:-1]) * 86400
        say = "–¥–Ω–µ–π"
        on = " –Ω–∞"
        if ban_for == "60":
            say = "–¥–µ–Ω—å"
        if ban_for == "120":
            say = "–¥–Ω—è"
        if ban_for == "180":
            say = "–¥–Ω—è"
        if ban_for == "240":
            say = "–¥–Ω—è"       
    else:
        ban_for = 31622400

    replied_user = message.reply_to_message.from_user.id
    now_time = int(time.time())
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=replied_user, can_send_messages=False,
                                   can_send_media_messages=False, can_send_other_messages=False,
                                   until_date=now_time + ban_for)
    await message.reply(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username} –≤–∏–¥–∞–Ω –º—É—Ç{on} {till_date[:1]} {say}")
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['mute'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")       

# random mute chat member
@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['dont_click_me'],
commands_prefix='!/')
async def mute_random(message: types.Message):
    now_time = int(time.time())
    replied_user_id = message.from_user.id
    replied_user = message.from_user.full_name
    random_m = randint(1, 10)
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=replied_user_id, can_send_messages=False,
                                   can_send_media_messages=False, can_send_other_messages=False,
                                   until_date=now_time + 60 * random_m)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username} –≤–∏–¥–∞–Ω –º—É—Ç –Ω–∞ {random_m} –º–∏–Ω—É—Ç")

# unmute user in chat
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands_prefix='!/',
                    chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['unmute'])
async def unmute(message: types.Message):
    replied_user = message.reply_to_message.from_user.id
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=replied_user, can_send_messages=True,
                                   can_send_media_messages=True, can_send_other_messages=True)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ä–∞–∑–º—É—á–µ–Ω")

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['unmute'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")                                                                                   

# pin chat message
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True),
                    chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['pin'], commands_prefix='!/')
async def pin_message(message: types.Message):
    msg_id = message.reply_to_message.message_id
    await bot.pin_chat_message(message_id=msg_id, chat_id=message.chat.id)

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['pin'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")               

# unpin chat message
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands_prefix='!/',
                    chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['unpin'])
async def unpin_message(message: types.Message):
    msg_id = message.reply_to_message.message_id
    await bot.unpin_chat_message(message_id=msg_id, chat_id=message.chat.id)

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['unpin'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")          

# delete user message
@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=True), commands_prefix='!/',
                    chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['del'])
async def delete_message(message: types.Message):
    msg_id = message.reply_to_message.message_id
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message_handler(AdminFilter(is_chat_admin=True), IsReplyFilter(is_reply=False), commands=['del'],
                    commands_prefix='!/', chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def ban(message: types.Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–±—â–µ–Ω–Ω–∏—è!")    
# get chat admins list
@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['admins'],
                    commands_prefix='!/')
async def get_admin_list(message: types.Message):
    admins_id = [(admin.user.id, admin.user.full_name) for admin in await bot.get_chat_administrators(
        chat_id=message.chat.id)]
    admins_list = []
    for ids, name in admins_id:
        admins_list.append("".join(f"[{name}]"))
    result_list = ""
    for admins in admins_list:
        result_list += "".join(admins) + '\n'
    await message.reply("–ê–¥–º–∏–Ω–∏ —á–∞—Ç–∞:\n" + result_list, parse_mode=types.ParseMode.MARKDOWN)


# report about spam or something else
@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['report'],
                      commands_prefix='!/')
async def report_by_user(message: types.Message):
    msg_id = message.reply_to_message.message_id
    user_id = message.from_user.id
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    for adm_id in admins_list:
        try:
            await bot.send_message(text=f"üÜò–ñ–∞–ª–æ–±–∞ –≤ —á–∞—Ç–µ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{message.from_user.full_name}</code> [<code>{message.from_user.user.id}</code>] @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É –Ω–∞ <code>{message.reply_to_message.from_user.username}</code> [<code>{message.reply_to_message.from_user.id}</code>]",
                                   chat_id=adm_id, parse_mode=types.ParseMode.MARKDOWN,
                                   disable_web_page_preview=True)
        except:
            pass
    await message.reply(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º!")

@dp.message_handler(commands=["rules"], commands_prefix="!/")
async def start(message: types.Message):
    await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\nüö´ –ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞\nüö´–°–ø–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω\n\n–ù–µ —Å–ª–µ–¥—É–≤–∞–Ω–Ω–∏—è –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞ –∫–∞—Ä–∞–µ—Ç—å—Å—è –±–∞–Ω–æ–º –∏–ª–∏ –º—É—Ç–æ–º!\n–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤–∞—Å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!\n–ï—Å–ª–∏ –í–∏ —É–≤–∏–¥–µ–ª–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /report —á—Ç–æ–±–∏ –∞–¥–º–∏–Ω–∏ –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–Ω–∏—è –Ω–∞ –π–æ–≥–æ —Å–æ–±—â–µ–Ω–Ω–∏—è –≤ —á–∞—Ç–µ!")

@dp.message_handler(commands=["msg"], commands_prefix="!/")
async def echo(message: types.Message):
  if not message.reply_to_message:  
       if '!msg' in message.text:
          await message.delete()
       if '/msg' in message.text:
          await message.delete()
       await message.answer(message.text[5:])
       await message.reply_to_message.from_user.id(message.text[5:])
  if message.reply_to_message:
    if '!msg' in message.text:
        await message.delete()
    if '/msg' in message.text:
        await message.delete()  
    await message.reply_to_message.reply(message.text[5:])

@dp.message_handler(commands=["weather"], commands_prefix="!/")
async def start_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã! üå§")

@dp.message_handler(commands=["well_usd"], commands_prefix="!/")
async def start(message: types.Message):
    first = f'{message.text[6:]}'
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/usd/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res) 

@dp.message_handler(commands=["well_eur"], commands_prefix="!/")
async def start(message: types.Message):
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/eur/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res) 

@dp.message_handler(commands=["well_uah"], commands_prefix="!/")
async def start(message: types.Message):
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/uah/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res) 

@dp.message_handler(commands=["well_rub"], commands_prefix="!/")
async def start(message: types.Message):
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/rub/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res)            

@dp.message_handler(commands=["well_gbp"], commands_prefix="!/")
async def start(message: types.Message):
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/gbp/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res)    

@dp.message_handler(commands=["well_pln"], commands_prefix="!/")
async def start(message: types.Message):
    second = f'{message.text[10:]}'
    url = f'https://www.currency.me.uk/convert/pln/{second}'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    well = soup.find("span", { "class" : "mini ccyrate" }).text
    res = f"{well}"
    await message.reply(res)                            

@dp.message_handler(commands=["uah"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/uah/usd'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    usd = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/uah/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    rub = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/uah/eur'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    eur = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/uah/gbp'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/uah/pln'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    pln = soup.find("span", { "class" : "mini ccyrate" }).text    

    res = f"UAHüá∫üá¶\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"
    await message.reply(res)

@dp.message_handler(commands=["rub"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/rub/usd'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    usd = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/rub/uah'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    uah = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/rub/eur'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    eur = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/rub/gbp'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/rub/pln'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    pln = soup.find("span", { "class" : "mini ccyrate" }).text    

    res = f"RUBüá∑üá∫\nüá∫üá∏{usd}\nüá∫üá¶{uah}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"
    await message.reply(res) 

@dp.message_handler(commands=["gbp"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/gbp/usd'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    usd = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/gbp/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    rub = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/gbp/eur'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    eur = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/gbp/uah'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    uah = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/gbp/pln'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    pln = soup.find("span", { "class" : "mini ccyrate" }).text    

    res = f"GBPüí∑\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüáµüá±{pln}"
    await message.reply(res)

@dp.message_handler(commands=["pln"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/pln/usd'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    usd = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/pln/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    rub = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/pln/eur'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    eur = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/pln/uah'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    uah = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/pln/gbp'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    gbp = soup.find("span", { "class" : "mini ccyrate" }).text    

    res = f"PLNüáµüá±\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüá¨üáß{gbp}"
    await message.reply(res)

@dp.message_handler(commands=["usd"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/usd/uah'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    uah = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/usd/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    rub = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/usd/eur'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    eur = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/usd/gbp'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/usd/pln'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    pln = soup.find("span", { "class" : "mini ccyrate" }).text    

    res = f"USDüíµ\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"
    await message.reply(res)

@dp.message_handler(commands=["eur"], commands_prefix="!/")
async def start(message: types.Message):
    url = 'https://www.currency.me.uk/convert/eur/uah'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    uah = soup.find("span", { "class" : "mini ccyrate" }).text

    url = 'https://www.currency.me.uk/convert/eur/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    rub = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/eur/usd'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    usd = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/eur/gbp'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

    url = 'https://www.currency.me.uk/convert/eur/pln'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    pln = soup.find("span", { "class" : "mini ccyrate" }).text 

    res = f"EURüí∂\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá∫üá∏{usd}\nüá¨üáß{gbp}\nüáµüá±{pln}"
    await message.reply(res)

@dp.message_handler(commands=["all_news"], commands_prefix="!/")
async def get_all_news(message: types.Message):
    with open("news.json") as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items()):
        news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
            f"{hlink(v['article_title'], v['article_url'])}"
        await message.answer(news)

@dp.message_handler(commands="last_fave_news")
async def get_last_five_news(message: types.Message):
    with open("news.json") as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items())[-5:]:
        news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
            f"{hlink(v['article_title'], v['article_url'])}"

        await message.answer(news)

@dp.message_handler(commands=["fresh_news"], commands_prefix="!/")
async def get_fresh_news(message: types.Message):
    fresh_news = check_news_update()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                f"{hlink(v['article_title'], v['article_url'])}"

            await message.answer(news)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def filter_mes(message: types.Message):
    await bot.send_message(837817771, f'[@{message.from_user.username}] [<code>{message.from_user.id}</code>] [<code>{message.from_user.full_name}</code>], chat_id=[<code>{message.chat.id}</code>]\n{message.text[0:]}')    
    for word in words:
            if word in message.text.lower():
                await message.delete()
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –Ω–∞—Ä—É—à–∏–≤ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –∏ –Ω–∞–ø–∏—Å–∞–≤ –º–∞—Ç –≤ —á–∞—Ç–µ.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º.")
    if not dbx.user_exists(message.from_user.id):
        dbx.add_user(message.from_user.id)
    if not dbx.mute(message.from_user.id):
        print("/")    
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        msgw = await message.reply(
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
                )
    except:
        print(".")                                  